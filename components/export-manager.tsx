"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { FileText, Download, Printer, Mail } from "lucide-react"
import { useLanguage } from "@/lib/language-context"

interface ExportManagerProps {
  content: string
  title: string
}

export function ExportManager({ content, title }: ExportManagerProps) {
  const { t } = useLanguage()
  const [exportFormat, setExportFormat] = useState("pdf")
  const [includeHeader, setIncludeHeader] = useState(true)
  const [includeFooter, setIncludeFooter] = useState(true)
  const [includeTimestamp, setIncludeTimestamp] = useState(true)

  const handleExport = async (format: string) => {
    let exportContent = content

    // Add header if selected
    if (includeHeader) {
      exportContent = `${title}\n${"=".repeat(title.length)}\n\n${exportContent}`
    }

    // Add footer if selected
    if (includeFooter) {
      const footer = `\n\n${"_".repeat(50)}\nGenerated by LegalDoc AI`
      if (includeTimestamp) {
        exportContent += `${footer}\nGenerated on: ${new Date().toLocaleString()}`
      } else {
        exportContent += footer
      }
    }

    if (format === "pdf") {
      // Simulate PDF generation
      const blob = new Blob([exportContent], { type: "application/pdf" })
      downloadFile(blob, `${title}.pdf`)
    } else if (format === "docx") {
      // Simulate Word document generation
      const blob = new Blob([exportContent], {
        type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      })
      downloadFile(blob, `${title}.docx`)
    } else if (format === "txt") {
      const blob = new Blob([exportContent], { type: "text/plain" })
      downloadFile(blob, `${title}.txt`)
    } else if (format === "html") {
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>${title}</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
            h1 { border-bottom: 2px solid #333; }
            .footer { margin-top: 40px; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <pre>${exportContent}</pre>
        </body>
        </html>
      `
      const blob = new Blob([htmlContent], { type: "text/html" })
      downloadFile(blob, `${title}.html`)
    }
  }

  const downloadFile = (blob: Blob, filename: string) => {
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handlePrint = () => {
    const printWindow = window.open("", "_blank")
    if (printWindow) {
      printWindow.document.write(`
        <html>
        <head>
          <title>${title}</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
            @media print { body { margin: 20px; } }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          <pre>${content}</pre>
          ${includeFooter ? `<div style="margin-top: 40px; font-size: 12px; color: #666;">Generated by LegalDoc AI${includeTimestamp ? ` on ${new Date().toLocaleString()}` : ""}</div>` : ""}
        </body>
        </html>
      `)
      printWindow.document.close()
      printWindow.print()
    }
  }

  const handleEmailShare = () => {
    const subject = encodeURIComponent(`Legal Document: ${title}`)
    const body = encodeURIComponent(`Please find the legal document below:\n\n${content}`)
    window.open(`mailto:?subject=${subject}&body=${body}`)
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-lg">
          <Download className="h-4 w-4" />
          Export & Share
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="format">Export Format</Label>
          <Select value={exportFormat} onValueChange={setExportFormat}>
            <SelectTrigger>
              <SelectValue placeholder="Select format" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="pdf">PDF Document</SelectItem>
              <SelectItem value="docx">Word Document</SelectItem>
              <SelectItem value="txt">Plain Text</SelectItem>
              <SelectItem value="html">HTML Document</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-3">
          <Label>Export Options</Label>
          <div className="flex items-center space-x-2">
            <Checkbox id="header" checked={includeHeader} onCheckedChange={setIncludeHeader} />
            <Label htmlFor="header" className="text-sm">
              Include document header
            </Label>
          </div>
          <div className="flex items-center space-x-2">
            <Checkbox id="footer" checked={includeFooter} onCheckedChange={setIncludeFooter} />
            <Label htmlFor="footer" className="text-sm">
              Include footer with branding
            </Label>
          </div>
          <div className="flex items-center space-x-2">
            <Checkbox id="timestamp" checked={includeTimestamp} onCheckedChange={setIncludeTimestamp} />
            <Label htmlFor="timestamp" className="text-sm">
              Include generation timestamp
            </Label>
          </div>
        </div>

        <div className="grid grid-cols-2 gap-2">
          <Button variant="outline" size="sm" onClick={() => handleExport(exportFormat)} className="justify-start">
            <FileText className="h-4 w-4 mr-2" />
            Export
          </Button>
          <Button variant="outline" size="sm" onClick={handlePrint} className="justify-start bg-transparent">
            <Printer className="h-4 w-4 mr-2" />
            Print
          </Button>
        </div>

        <Button variant="outline" size="sm" onClick={handleEmailShare} className="w-full justify-start bg-transparent">
          <Mail className="h-4 w-4 mr-2" />
          Share via Email
        </Button>
      </CardContent>
    </Card>
  )
}
